name: "Godot CI/CD"

env:
  GODOT_VERSION: 4.4.1
  # Project name here will be used as the distributed executable name on steam
  PROJECT_NAME: 'the-last-diner'
  # This must match with the itch page of the game
  ITCH_PROJECT_NAME: 'team-rocket'

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
  Builds:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: barichello/godot-ci:4.4.1
    steps:
      - name: Checkout with Git LFS
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
          lfs: true

      - name: Move export templates into position
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Import assets
        run: |
          godot --headless --editor --quit-after 2
          godot --import --headless
          # Run a second time to make sure that the warnings have cleared.
          # This should exit pretty much immediately.
          godot --import --headless

      - name: Web Build
        run: |
          mkdir -v -p build/web
          godot -v --export-release --headless "Web"

      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          godot --headless --verbose --export-release "Windows Desktop" "$EXPORT_DIR/windows/${{ env.PROJECT_NAME }}_windows.exe"

      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          EXPORT_DIR="$(readlink -f build)"
          godot --headless --verbose --export-release "Linux/X11" "$EXPORT_DIR/linux/${{ env.PROJECT_NAME }}_linux.x86_64"

      - name: MacOS Build
        run: |
          mkdir -v -p build/macos
          EXPORT_DIR="$(readlink -f build)"
          godot --headless --verbose --export-release "macOS" "$EXPORT_DIR/macos/${{ env.PROJECT_NAME }}_mac.app"

      - name: Add coi-service-worker
        run: |
          git clone https://github.com/gzuidhof/coi-serviceworker.git
          mv coi-serviceworker/coi-serviceworker.js build/web/coi-serviceworker.js
          sed -i '3 i <script src="coi-serviceworker.js"></script>' build/web/index.html

      - name: 🚀 Deploy to `gh-pages` branch # Push - deploy to main directory
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          publish_branch: gh-pages
          force_orphan: true
          # NOTE: keeping files like this could be dangerous. Consider deleting stuff to save space if needed, depending on needs
          # e.g. Add an only-keep-last-10-version job
          keep_files: true
          user_name: "github-ci[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Deploy main branch push to main directory"

      - name: 🚀 Deploy to `gh-pages` branch # PR - deploy to subdirectory
        if: github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          publish_branch: gh-pages
          force_orphan: true
          keep_files: true
          user_name: "github-ci[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Deploy PR web deploy to subdirectory ${{ github.event.number }}"
          destination_dir: ${{ github.event.number }}

      - name: Zip Web artifacts
        run: zip -r "${{ env.PROJECT_NAME }}_web.zip" build/web

      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}_web
          path: ${{ env.PROJECT_NAME }}_web.zip
          
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}_windows
          path: build/windows

      - name: Upload MacOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}_macos
          path: build/macos
          
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}_linux
          path: build/linux

  Github-page-release: # Push only - create github releases
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [Builds]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Get branch name
        id: get_branch
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}_web

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.GitVersion_FullSemVer}}
          release_name: ${{env.GitVersion_FullSemVer}}
          body: |
            Release notes for ${{env.GitVersion_FullSemVer}}
          draft: false
          prerelease: true

      - name: Upload Web Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PROJECT_NAME }}_web.zip
          asset_name: "${{ env.PROJECT_NAME }}_web.zip"
          asset_content_type: application/zip

  Itch-deploy: # Push only - create itch releases
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [Builds]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download Web artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}_web

    - uses: manleydev/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ secrets.ITCH_IO_API_KEY }}
        CHANNEL: HTML
        ITCH_GAME: ${{ env.ITCH_PROJECT_NAME }}
        ITCH_USER: gmcunimelb
        PACKAGE: ${{ env.PROJECT_NAME }}_web.zip
  
  Steam-deploy: # Push only - deploy for steam
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [Builds]
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows Build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}_windows
        path: build/windows

    - name: Download MacOS Build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}_macos
        path: build/macos
        
    - name: Download Linux Build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}_linux
        path: build/linux

    - name: Check required secrets exist # Fail if secrets not defined
      env: 
        STEAM_APPID_LOCAL: ${{ secrets.STEAM_APPID }}
        STEAM_USERNAME_LOCAL: ${{ secrets.STEAM_USERNAME }}
        STEAM_CONFIG_VDF_LOCAL: ${{ secrets.STEAM_CONFIG_VDF }}
      run: |
        if [ -z "$STEAM_APPID_LOCAL" ]; then
          exit 1
        fi
        if [ -z "$STEAM_USERNAME_LOCAL" ]; then
          exit 1
        fi
        if [ -z "$STEAM_CONFIG_VDF_LOCAL" ]; then
          exit 1
        fi

    # https://github.com/game-ci/steam-deploy, using configVdf to authenticate
    - uses: game-ci/steam-deploy@v3
      with:
        username: ${{ secrets.STEAM_USERNAME }}          
        configVdf: ${{ secrets.STEAM_CONFIG_VDF}}         
        appId: ${{ secrets.STEAM_APPID }}
        buildDescription: Auto Steam Deploy ${{env.GitVersion_FullSemVer}}
        rootPath: build
        depot1Path: windows
        # depot1InstallScriptPath: StandaloneWindows64/install_script.vdf
        depot2Path: macos
        depot3Path: linux
        # Might be too dangerous to immediately release the build onto some branch.
        # Steam-ci also doesn't support releasing to a branch protected by password for now it seems.
        # So for now, manually release the build to the correct branch on steamworks.
        # releaseBranch: develop
         
  PR-comment-update: # PR only - comment preview link
    if: github.event_name == 'pull_request'
    needs: [Builds]
    runs-on: ubuntu-latest
    permissions: 
      pull-requests: write
    steps:
      - name: Set preview URL message
        id: set-message
        run: |
          if [[ "${{ needs.Builds.result }}" == "success" ]]; then
            echo "message=🌐 [Web Preview](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.event.pull_request.number }}/)" >> $GITHUB_OUTPUT
          else
            echo "message=❌ Deployment failed for this PR." >> $GITHUB_OUTPUT
          fi

      - name: Comment deploy preview URL
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: ${{ steps.set-message.outputs.message }}
          comment-tag: execution
